var http = require('http')
    ,error = require('comlib/wrapError').makeError
    ,bdlog = require('comlib/bdlog.js');

var request = function(options,callback){
    //console.log(options);
    //bdlog.trace('logid:' + options.logid + 'options:' + JSON.stringify(options));
    var req = http.request(options,function(res){
		if(res.headers["set-cookie"]&&options.response){
			//cookie 属于头信息，必须在一开始的时候就写入，不能在send之后写
			options.response.setHeader("Set-Cookie",res.headers["set-cookie"].toString().replace(/Domain\=[^;]*/gi,"Domain="+options.request.host));
		}
        if(res.statusCode != 200 && (res.statusCode<300||res.statusCode>400)){
            bdlog.debug('logid:' + options.logid + ' statuscode:' + res.statusCode);
            return callback(error('status_code is '+ res.statusCode),null,{res:res});
        }
        //bdlog.debug('logid:' + options.logid + ' status_code is '+ res.statusCode + ' HEADERS:' + JSON.stringify(res.headers));
        if(options.res_encode != undefined){
            res.setEncoding(options.res_encode);
        }
        //chunk data
        var data = [];
        res.on('data',function(chunk){
        	 if(options.response && (res.statusCode<300||res.statusCode>400)){
        		 options.response.write(chunk);
        	 }else{
        		 data.push(chunk);
        	 } 
        });
        
        res.on('end',function(){
			if (!options.response) {
				if(data.length == 0){
	                return callback(null,null,{res:res});
	            }else{
	            	data = Buffer.concat(data);
					// bdlog.debug('logid:' + options.logid + ' http response
					// length:' + data.toString().length);
					callback(null, data,{res:res});
	            }
				

			} else {
				if (res.statusCode>300&&res.statusCode<400) {
					var dataStr = Buffer.concat(data).toString();
					options.response.writeHead(res.statusCode,{"Location":dataStr.substring(34)});
					callback(null,null,{res:res});
				} else {
					callback(null,null,{res:res});
				}
				
			}
            
        });
        res.on('close',function(){
            bdlog.warn('logid:' + options.logid + ' unexpected close event fired');
        });
    });
    req.on('error',function(err){
        callback(err);
        req.end();
    });

    if(options.timeout != null){
        req.setTimeout(options.timeout, function(){
            bdlog.warn('logid:' + options.logid + ' timeout in ' + options.timeout);
           // console.log('timeout in ' + options.timeout);
            req.abort();
        });
    }

    if(options.write_data != null){
    	bdlog.debug('into write');
        req.write(options.write_data);
    }
    req.setSocketKeepAlive();
    req.end();
}

exports.request = request;